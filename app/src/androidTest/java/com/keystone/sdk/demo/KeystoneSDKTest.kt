package com.keystone.sdk.demo

import androidx.test.ext.junit.runners.AndroidJUnit4
import com.keystone.sdk.KeystoneSDK
import com.sparrowwallet.hummingbird.UR

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

fun String.decodeHex(): ByteArray {
    check(length % 2 == 0) { "HexString must have an even length" }
    return chunked(2)
        .map { it.toInt(16).toByte() }
        .toByteArray()
}

fun ByteArray.toHexString(): String {
    return joinToString("") { "%02X".format(it) }
}

@RunWith(AndroidJUnit4::class)
class KeystoneSDKTest {
    @Test
    fun decodeQR() {
        val sdk = KeystoneSDK()
        val decodeResult = sdk.decodeQR("UR:CRYPTO-MULTI-ACCOUNTS/OTADCYJOKBWEJZAOLYTAADDLOXAOWKAXHDCXDPFNJYDNMKYTWDKTETWZHTATVDADNYJTSPWSBDAYWNHSJEFTFSDTFMCXBEPLYKRYAMTAADDYOTADLOCSDWYKCFADYKYKAEYKAEYKAOCYJOKBWEJZAXAAASIHGUGWGSDPDYAXISGRIHKKJKJYJLJTIHSSJYKSGT")
        assertEquals(
            "A3011A707EED6C0281D9012FA402F40358202D3C742B98F9EA7738F25A07E7019A6EC8EF0B08F1616B3A3D293E2010AEF5BD06D90130A30188182CF51901F5F500F500F5021A707EED6C03040965534F4C2D3003684B657973746F6E65",
            decodeResult.ur?.cborBytes?.toHexString()
        )
        assertEquals(
            "crypto-multi-accounts",
            decodeResult.ur?.type
        )
    }

    @Test
    fun parseMultiAccounts() {
        val sdk = KeystoneSDK()
        val decodeResult = sdk.decodeQR("UR:CRYPTO-MULTI-ACCOUNTS/OTADCYJOKBWEJZAOLYTAADDLOXAOWKAXHDCXDPFNJYDNMKYTWDKTETWZHTATVDADNYJTSPWSBDAYWNHSJEFTFSDTFMCXBEPLYKRYAMTAADDYOTADLOCSDWYKCFADYKYKAEYKAEYKAOCYJOKBWEJZAXAAASIHGUGWGSDPDYAXISGRIHKKJKJYJLJTIHSSJYKSGT")
        val ur = decodeResult.ur
        if (ur != null) {
            val accounts = sdk.parseMultiAccounts(ur)
            println(accounts)
            assertEquals(
                "Keystone",
                accounts.device
            )
            assertEquals(
                "707eed6c",
                accounts.masterFingerprint
            )
            assertEquals(
                501,
                accounts.keys[0].extra.okx.chainId
            )
        }
    }

    @Test
    fun parseMultiAccountsWithXPub() {
        val sdk = KeystoneSDK()
        val ur = UR("crypto-multi-accounts", "a3011aa424853c0281d9012fa4035821034af544244d31619d773521a1a366373c485ff89de50bea543c2b14cccfbb6a500458208dc2427d8ab23caab07729f88f089a3cfa2cfffcd7d1e507f983c0d44a5dbd3506d90130a10186182cf500f500f5081a149439dc03686b657973746f6e65".decodeHex())
        val accounts = sdk.parseMultiAccounts(ur)
        println(accounts)
        assertEquals(
            "8dc2427d8ab23caab07729f88f089a3cfa2cfffcd7d1e507f983c0d44a5dbd35",
            accounts.keys[0].getChainCode()
        )
        assertEquals(
            "xpub6BoYPFH1MivLdh2BWZuRu6LfuaVSkVak5wsDxjjkAWcUM2QPKyeCHXMgDfRJFvKZhqA4vM5vsgcD6C5ot9eThnFHstgPntNzBLUdLeKS7Zt",
            accounts.keys[0].getExtendedPublicKey()
        )

        println(accounts.keys[0])

        assertEquals(
            0,
            accounts.keys[0].extra.okx.chainId
        )
    }

    @Test
    fun parseExtendedPublicKey() {
        val sdk = KeystoneSDK()
        val ur = UR("crypto-hdkey", "A902F4035821032F547FD525B6D83CC2C44F939CC1425FA1E98D97D26B00F9E2D04952933C5128045820B92B17B393612FC8E945E5C5389439CA0C0A28C3076C060B15C3F9F6523A9D1905D90131A201183C020006D90130A30186182CF5183CF500F5021A52006EA0030307D90130A2018400F480F40300081AEA156CD409684B657973746F6E650A706163636F756E742E7374616E64617264".decodeHex())
        val account = sdk.parseAccount(ur)
        println(account)

        assertEquals("ETH", account.chain)
        assertEquals("m/44'/60'/0'", account.path)
        assertEquals("Keystone", account.name)
        assertEquals("52006ea0", account.xfp)
        assertEquals("032f547fd525b6d83cc2c44f939cc1425fa1e98d97d26b00f9e2d04952933c5128", account.publicKey)
        assertEquals("b92b17b393612fc8e945e5c5389439ca0c0a28c3076c060b15c3f9f6523a9d19", account.getChainCode())
        assertEquals("account.standard", account.note)
        assertEquals("xpub6DNZW8rxA28BGjbbjJEHhsAbYYyFpJJWN52biwHvLS1kTeJ2j2xzcf41oTQ7o5h5udaHqb6NLxei5tZ8fbjBziZajSY4TmrPC4ftcK8pLZ3", account.getExtendedPublicKey())
    }

    @Test
    fun parseMultiPublicKeys() {
        val sdk = KeystoneSDK()
        val ur = UR("crypto-accountdecodeHex())
        val multiAccounts = sdk.parseCryptoAccount(ur)
        println(multiAccounts)

        assertEquals(10, multiAccounts.keys.size)

        val firstKey = multiAccounts.keys.first()
        assertEquals("52006ea0", firstKey.xfp)
        assertEquals("m/44'/60'/0'/0/0", firstKey.path)
        assertEquals("account.ledger_live", firstKey.note)
        assertEquals("02fef03a2bd3de113f1dc1cdb1e69aa4d935dc3458d542d796f5827abbb1a58b5e", firstKey.publicKey)
        assertEquals("", firstKey.getChainCode())
        assertEquals("", firstKey.getExtendedPublicKey())
    }

    @Test
    fun getUncompressedKey() {
        val sdk = KeystoneSDK()
        val uncompressedKey = sdk.getUncompressedKey("02fef03a2bd3de113f1dc1cdb1e69aa4d935dc3458d542d796f5827abbb1a58b5e")
        val expectedResult = "04fef03a2bd3de113f1dc1cdb1e69aa4d935dc3458d542d796f5827abbb1a58b5ebdffecfa6587da3216d50114700e5e314650cc2268e9fcb6ac31593bcc71d178"

        assertEquals(expectedResult, uncompressedKey)
    }
}
